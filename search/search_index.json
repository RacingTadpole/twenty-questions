{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Learn To Program in Python We are going to write a text game where you think of an animal, and the program asks questions to try and guess what it is. The program will not be a very good guesser at first, but it will learn new animals the more you play it. These lessons came out of teaching my 13-year-old son to program in Python, and I hope they may be useful for you too. Installing everything you need is probably the hardest part. If you can do that, the lessons should be a breeze :-) . Part 1 Lesson 1: Print and Input Lesson 2: If Lesson 3: More about Variables Lesson 4: For Loops Lesson 5: While Loops Lesson 6: Game Loop Ideas Lesson 7: Dictionaries Lesson 8: Data classes","title":"Home"},{"location":"#learn-to-program-in-python","text":"We are going to write a text game where you think of an animal, and the program asks questions to try and guess what it is. The program will not be a very good guesser at first, but it will learn new animals the more you play it. These lessons came out of teaching my 13-year-old son to program in Python, and I hope they may be useful for you too. Installing everything you need is probably the hardest part. If you can do that, the lessons should be a breeze :-) . Part 1 Lesson 1: Print and Input Lesson 2: If Lesson 3: More about Variables Lesson 4: For Loops Lesson 5: While Loops Lesson 6: Game Loop Ideas Lesson 7: Dictionaries Lesson 8: Data classes","title":"Learn To Program in Python"},{"location":"installation/pc/","text":"Install everything you need on a PC Visual Studio (VS) Code Git Set default editor to VS Code. Python Pipenv Set up VS Code Sublime text GitLens Get some sample code Run it in VS Code Run it using \"bash\"","title":"Install everything you need on a PC"},{"location":"installation/pc/#install-everything-you-need-on-a-pc","text":"","title":"Install everything you need on a PC"},{"location":"installation/pc/#visual-studio-vs-code","text":"","title":"Visual Studio (VS) Code"},{"location":"installation/pc/#git","text":"Set default editor to VS Code.","title":"Git"},{"location":"installation/pc/#python","text":"","title":"Python"},{"location":"installation/pc/#pipenv","text":"","title":"Pipenv"},{"location":"installation/pc/#set-up-vs-code","text":"Sublime text GitLens","title":"Set up VS Code"},{"location":"installation/pc/#get-some-sample-code","text":"","title":"Get some sample code"},{"location":"installation/pc/#run-it-in-vs-code","text":"","title":"Run it in VS Code"},{"location":"installation/pc/#run-it-using-bash","text":"","title":"Run it using \"bash\""},{"location":"lessons/001-print-and-input/","text":"Lesson 1: Print and Input See if you can guess what this program will do: print('Hello!') Type it into a python interpreter and check. We found putting it into a new file in Visual Studio Code, and then clicking the green \"play\" button, works well. How about this program? print('Hello!') input('What is your name? ') What if you want to do something with the name the person types in? How about this: x = input('What is your name? ') print('Hello ' + x + '!') Notice how + \"adds\" the parts of the sentence together? Programmers call text like this \"strings\" for some reason. What do you think the next program would do? q = 'What is your name? ' x = input(q) print('Hello ' + x + '!')","title":"Lesson 1: Print and Input"},{"location":"lessons/001-print-and-input/#lesson-1-print-and-input","text":"See if you can guess what this program will do: print('Hello!') Type it into a python interpreter and check. We found putting it into a new file in Visual Studio Code, and then clicking the green \"play\" button, works well. How about this program? print('Hello!') input('What is your name? ') What if you want to do something with the name the person types in? How about this: x = input('What is your name? ') print('Hello ' + x + '!') Notice how + \"adds\" the parts of the sentence together? Programmers call text like this \"strings\" for some reason. What do you think the next program would do? q = 'What is your name? ' x = input(q) print('Hello ' + x + '!')","title":"Lesson 1: Print and Input"},{"location":"lessons/002-if/","text":"Lesson 2: If What do you think this would do? print('Welcome to Twenty Questions') print('Please think of an animal or plant, and I will try to guess what it is by asking questions.') print('Please answer questions with \"yes\" or \"no') print() x = input('Does your animal fly? ') print('You said: ' + x) if x == 'yes': print('Great!') print('I think your animal is a fruit bat.') if x == 'no': print('Aha!') print('I think your animal is a wombat.') Notice the double equals signs == that \"if\" uses to check if x equals 'yes' . Programmers use a double equals sign to ask a question about whether the two things are equal. (Does x equal 'yes' ?) In contrast, the single equals sign in x = input('Does your animal fly? ') actually changes x to \"make it equal to\" what the person types in. Also notice instead of saying \"then\", there's a colon, and the stuff after it has been indented. If that's too easy, what about this one? x = input('Does your animal fly? ') if x == 'yes': xy = input('Is your flying animal a bird? ') if xy == 'yes': print('I think your animal is a pelican.') if xy == 'no': print('I think your animal is a fruit bat.') if x == 'no': print('I think your animal is a wombat.') It's starting to look a bit like our game now! It would get boring to write this out for too many more questions, right? Wouldn't it be nice to put this in a loop somehow?","title":"Lesson 2: If"},{"location":"lessons/002-if/#lesson-2-if","text":"What do you think this would do? print('Welcome to Twenty Questions') print('Please think of an animal or plant, and I will try to guess what it is by asking questions.') print('Please answer questions with \"yes\" or \"no') print() x = input('Does your animal fly? ') print('You said: ' + x) if x == 'yes': print('Great!') print('I think your animal is a fruit bat.') if x == 'no': print('Aha!') print('I think your animal is a wombat.') Notice the double equals signs == that \"if\" uses to check if x equals 'yes' . Programmers use a double equals sign to ask a question about whether the two things are equal. (Does x equal 'yes' ?) In contrast, the single equals sign in x = input('Does your animal fly? ') actually changes x to \"make it equal to\" what the person types in. Also notice instead of saying \"then\", there's a colon, and the stuff after it has been indented. If that's too easy, what about this one? x = input('Does your animal fly? ') if x == 'yes': xy = input('Is your flying animal a bird? ') if xy == 'yes': print('I think your animal is a pelican.') if xy == 'no': print('I think your animal is a fruit bat.') if x == 'no': print('I think your animal is a wombat.') It's starting to look a bit like our game now! It would get boring to write this out for too many more questions, right? Wouldn't it be nice to put this in a loop somehow?","title":"Lesson 2: If"},{"location":"lessons/003-variables/","text":"Lesson 3: More about Variables Let's learn one more thing before we get to loops. Remember we had q = 'What is your name? ' x = input(q) print('Hello ' + x + '!') Programmers call q and x \"variables\", because they can vary. String variables These particular variables are \"strings\" - they contain text. (Remember programmers call text \"strings\" for some reason.) Variables can be other types of things too. Numeric variables In order to do maths, you might expect numbers, and these are called \"integers\" (for whole numbers) or \"floats\" (for decimal numbers - the word \"float\" was picked originally because the computer stores them in a way that lets the decimal place \"float\" a long way to the left or right). n = 10 print(n) print(n + 5) print(n / 2) print(n * 3) k = n * 3 + 1 print(k) x = k / 10 print(x) Etc. You can ask if a variable is a string ( str ), an integer ( int ) or a float ( float ) using isinstance like this: n = 10 print(isinstance(n, int)) print(isinstance(n, str)) which returns True or False . In fact these responses are another type of variable, which can only be True or False. Such variables are named \"boolean\" ( bool ) after George Boole, an 1800s mathematician, for some reason, although the idea of true and false must be older than that. True/False variables a = True print(a) x = 'yes' print(x == 'yes') Notice the double equals sign gives us a True or False too. If you think about it, that makes sense for using with \"if\", right? If something is true, do something; if it's false, do something else. Lists Let's talk about one more, fancier type of variable - a list, eg. x = [1, 3, 4, 7, 'hello'] print(x) print(x[1]) print(len(x)) This will be handy in our next lesson, on loops. Notice how we got an element out of the list with x[1] - was it the one you expected? (Python starts counting at 0!) - and the length of the list with len(x) (the length is still what you'd expect, fortunately). Do you think you can put a list inside a list? Try it! x = [[1, 'hello'], [2, 'goodbye'], [3, 'the end']] print(x) print(x[2]) print(x[2][1])","title":"Lesson 3: More about Variables"},{"location":"lessons/003-variables/#lesson-3-more-about-variables","text":"Let's learn one more thing before we get to loops. Remember we had q = 'What is your name? ' x = input(q) print('Hello ' + x + '!') Programmers call q and x \"variables\", because they can vary.","title":"Lesson 3: More about Variables"},{"location":"lessons/003-variables/#string-variables","text":"These particular variables are \"strings\" - they contain text. (Remember programmers call text \"strings\" for some reason.) Variables can be other types of things too.","title":"String variables"},{"location":"lessons/003-variables/#numeric-variables","text":"In order to do maths, you might expect numbers, and these are called \"integers\" (for whole numbers) or \"floats\" (for decimal numbers - the word \"float\" was picked originally because the computer stores them in a way that lets the decimal place \"float\" a long way to the left or right). n = 10 print(n) print(n + 5) print(n / 2) print(n * 3) k = n * 3 + 1 print(k) x = k / 10 print(x) Etc. You can ask if a variable is a string ( str ), an integer ( int ) or a float ( float ) using isinstance like this: n = 10 print(isinstance(n, int)) print(isinstance(n, str)) which returns True or False . In fact these responses are another type of variable, which can only be True or False. Such variables are named \"boolean\" ( bool ) after George Boole, an 1800s mathematician, for some reason, although the idea of true and false must be older than that.","title":"Numeric variables"},{"location":"lessons/003-variables/#truefalse-variables","text":"a = True print(a) x = 'yes' print(x == 'yes') Notice the double equals sign gives us a True or False too. If you think about it, that makes sense for using with \"if\", right? If something is true, do something; if it's false, do something else.","title":"True/False variables"},{"location":"lessons/003-variables/#lists","text":"Let's talk about one more, fancier type of variable - a list, eg. x = [1, 3, 4, 7, 'hello'] print(x) print(x[1]) print(len(x)) This will be handy in our next lesson, on loops. Notice how we got an element out of the list with x[1] - was it the one you expected? (Python starts counting at 0!) - and the length of the list with len(x) (the length is still what you'd expect, fortunately). Do you think you can put a list inside a list? Try it! x = [[1, 'hello'], [2, 'goodbye'], [3, 'the end']] print(x) print(x[2]) print(x[2][1])","title":"Lists"},{"location":"lessons/004-for-loops/","text":"Lesson 4: For loops What do you think this will do? for x in [1, 2, 3, 5, 8]: print(x) It loops through the list and prints each element. You can do stuff to the element too: for x in [1, 2, 3, 5, 8]: print(x * 2 + 3) And you can put the list in a variable too: a = [1, 2, 3, 5, 8] for x in a: print(x) We've been using single letters for variables but you can use words. You just can't put spaces in the words, but we can use \"_\". numbers = [1, 2, 3, 5, 8] for x in numbers: print(x) or even my_numbers = [1, 2, 3, 5, 8] for number in my_numbers: print(number) How would you write a loop to show the squares of the numbers above? A little trick One nice thing about Python is this little trick - you can bring the for \"inside\" the list like this: a = [1, 2, 3, 5, 8] b = [x * 2 for x in a] print(b)","title":"Lesson 4: For loops"},{"location":"lessons/004-for-loops/#lesson-4-for-loops","text":"What do you think this will do? for x in [1, 2, 3, 5, 8]: print(x) It loops through the list and prints each element. You can do stuff to the element too: for x in [1, 2, 3, 5, 8]: print(x * 2 + 3) And you can put the list in a variable too: a = [1, 2, 3, 5, 8] for x in a: print(x) We've been using single letters for variables but you can use words. You just can't put spaces in the words, but we can use \"_\". numbers = [1, 2, 3, 5, 8] for x in numbers: print(x) or even my_numbers = [1, 2, 3, 5, 8] for number in my_numbers: print(number) How would you write a loop to show the squares of the numbers above?","title":"Lesson 4: For loops"},{"location":"lessons/004-for-loops/#a-little-trick","text":"One nice thing about Python is this little trick - you can bring the for \"inside\" the list like this: a = [1, 2, 3, 5, 8] b = [x * 2 for x in a] print(b)","title":"A little trick"},{"location":"lessons/005-while-loops/","text":"Lesson 5: While Loops You can also write loops with while . This gives you more flexibility, eg. you don't have to know how long the loop will go for before you start. The example below keeps asking you to type something until you type \"stop\". x = 'ok' while x != 'stop': x = input('Type anything, or \"stop\" to stop: ') print('You typed: ' + x) print('Finally!') Note that != means \"does not equal\", so the loop keeps going \"while x does not equal 'stop'\". As soon as it does, the computer leaves the indented section. You could write the for loop from the last section using while like this: a = [1, 2, 3, 5, 8] i = 0 while i < len(a): print(a[i]) Now you understand variables, \"if\"s and loops, we can get back to our game!","title":"Lesson 5: While Loops"},{"location":"lessons/005-while-loops/#lesson-5-while-loops","text":"You can also write loops with while . This gives you more flexibility, eg. you don't have to know how long the loop will go for before you start. The example below keeps asking you to type something until you type \"stop\". x = 'ok' while x != 'stop': x = input('Type anything, or \"stop\" to stop: ') print('You typed: ' + x) print('Finally!') Note that != means \"does not equal\", so the loop keeps going \"while x does not equal 'stop'\". As soon as it does, the computer leaves the indented section. You could write the for loop from the last section using while like this: a = [1, 2, 3, 5, 8] i = 0 while i < len(a): print(a[i]) Now you understand variables, \"if\"s and loops, we can get back to our game!","title":"Lesson 5: While Loops"},{"location":"lessons/006-game-loop-ideas/","text":"Lesson 6: Game Loop Ideas At the end of lesson 2 we had a version of our game already, with lots of if s - but it was hard to add new animals to it. Idea 1: For So, we want to put it in a loop somehow. Let's start with a for loop - what would this do? questions = [ 'Is it blue?', 'Is it bigger than a football?', 'Is it a mammal?', 'Does it fly?', ] for question in questions: x = input(question + ' ') print('Thanks for playing.') It asks all the questions ok, but it asks them all and ignores the answers. Idea 2: While This looks like a job for a while loop. With the same questions as above, let's try: i = 0 while i < len(questions): x = input(questions[i] + ' ') if x == 'n': i = i + 1 if x == 'y': i = i + 2 Now the questions depend on the answers - but not in a very sensible way. Idea 3: Choose your own adventure What we need is, for each question, a way to say which question comes next when you answer no, and which question comes next when you answer yes. Here's an idea: for each question, replace it with the question, its number, and the question numbers to go to when you answer yes and no. You can think of the question numbers like the page numbers in a \"Choose your own Adventure\" book. data = [ [0, 'Does your animal fly?', 1, 2], [1, 'Is your flying animal a bird?', 3, 4], [2, 'Does your animal live underwater?', 7, 8], [3, 'Is your bird native to Australia?', 5, 6], [4, 'Is it a fruit bat?'], [5, 'Is it a kookaburra?'], [6, 'Is it a blue jay?'], [7, 'Is your animal a mammal?', 9, 10], [8, 'Is it a wombat?'], [9, 'Is it a blue whale?'], [10, 'Is it a goldfish?'], ] See if you can trace through in your mind how the questions and answers are linked. Notice what we did when there are no more questions to ask - we just left off the last two numbers. If you say yes, the animal does fly (question number 0), then you are asked if it's a bird (question number 1); if you say no to that, you are asked \"is it a fruit bat?\" (number 4) - and there are no more questions after that. The first column is really just there to help us humans. How can we write a loop for this? Try and write one yourself. You might want to start by choosing a variable name for the \"current\" question number. And we don't really know what should stop the \"while\" loop yet, so you could write it for now as while True: , which will go forever (or until there's an error). Here's a first pass, that doesn't fully work yet. i = 0 while True: question = data[i][1] yes_number = data[i][2] no_number = data[i][3] x = input(question) if x == 'y': i = yes_number if x == 'n': i = no_number That almost works, but it fails when there are no page numbers to go to (which happens when it gets to the end). Here's one way you could fix that. i = 0 while i >= 0: info = data[i] question = info[1] x = input(question + ' ') if len(info) == 2: # There are no more questions if x == 'y': print('Wow, I guessed it!') if x == 'n': print('You beat me!') i = -1 else: # Go to the next question if x == 'y': i = info[2] if x == 'n': i = info[3] Notice when we got to an answer, we set i = -1 - so our while loop should continue only when i >= 0 . Another way you could do it is to use break to get out of the while loop - then you could still use while True: . You might be able to come up with other ways to do this. It's a little fiddly to write the questions now, but it works!","title":"Lesson 6: Game Loop Ideas"},{"location":"lessons/006-game-loop-ideas/#lesson-6-game-loop-ideas","text":"At the end of lesson 2 we had a version of our game already, with lots of if s - but it was hard to add new animals to it.","title":"Lesson 6: Game Loop Ideas"},{"location":"lessons/006-game-loop-ideas/#idea-1-for","text":"So, we want to put it in a loop somehow. Let's start with a for loop - what would this do? questions = [ 'Is it blue?', 'Is it bigger than a football?', 'Is it a mammal?', 'Does it fly?', ] for question in questions: x = input(question + ' ') print('Thanks for playing.') It asks all the questions ok, but it asks them all and ignores the answers.","title":"Idea 1: For"},{"location":"lessons/006-game-loop-ideas/#idea-2-while","text":"This looks like a job for a while loop. With the same questions as above, let's try: i = 0 while i < len(questions): x = input(questions[i] + ' ') if x == 'n': i = i + 1 if x == 'y': i = i + 2 Now the questions depend on the answers - but not in a very sensible way.","title":"Idea 2: While"},{"location":"lessons/006-game-loop-ideas/#idea-3-choose-your-own-adventure","text":"What we need is, for each question, a way to say which question comes next when you answer no, and which question comes next when you answer yes. Here's an idea: for each question, replace it with the question, its number, and the question numbers to go to when you answer yes and no. You can think of the question numbers like the page numbers in a \"Choose your own Adventure\" book. data = [ [0, 'Does your animal fly?', 1, 2], [1, 'Is your flying animal a bird?', 3, 4], [2, 'Does your animal live underwater?', 7, 8], [3, 'Is your bird native to Australia?', 5, 6], [4, 'Is it a fruit bat?'], [5, 'Is it a kookaburra?'], [6, 'Is it a blue jay?'], [7, 'Is your animal a mammal?', 9, 10], [8, 'Is it a wombat?'], [9, 'Is it a blue whale?'], [10, 'Is it a goldfish?'], ] See if you can trace through in your mind how the questions and answers are linked. Notice what we did when there are no more questions to ask - we just left off the last two numbers. If you say yes, the animal does fly (question number 0), then you are asked if it's a bird (question number 1); if you say no to that, you are asked \"is it a fruit bat?\" (number 4) - and there are no more questions after that. The first column is really just there to help us humans. How can we write a loop for this? Try and write one yourself. You might want to start by choosing a variable name for the \"current\" question number. And we don't really know what should stop the \"while\" loop yet, so you could write it for now as while True: , which will go forever (or until there's an error). Here's a first pass, that doesn't fully work yet. i = 0 while True: question = data[i][1] yes_number = data[i][2] no_number = data[i][3] x = input(question) if x == 'y': i = yes_number if x == 'n': i = no_number That almost works, but it fails when there are no page numbers to go to (which happens when it gets to the end). Here's one way you could fix that. i = 0 while i >= 0: info = data[i] question = info[1] x = input(question + ' ') if len(info) == 2: # There are no more questions if x == 'y': print('Wow, I guessed it!') if x == 'n': print('You beat me!') i = -1 else: # Go to the next question if x == 'y': i = info[2] if x == 'n': i = info[3] Notice when we got to an answer, we set i = -1 - so our while loop should continue only when i >= 0 . Another way you could do it is to use break to get out of the while loop - then you could still use while True: . You might be able to come up with other ways to do this. It's a little fiddly to write the questions now, but it works!","title":"Idea 3: Choose your own adventure"},{"location":"lessons/007-dictionaries/","text":"Lesson 7: Dictionaries That worked but lines like this are hard to read, don't you think? question = info[1] yes_number = info[2] no_number = info[3] Wouldn't something like this be nicer and less error-prone? question = info['question'] yes_number = info['yes'] no_number = info['no'] Python lets us do this. Instead of putting our question info into a list like this: [0, 'Does your animal fly?', 1, 2] you can name each part like this: {'number': 0, 'question': 'Does your animal fly?', 'yes': 1, 'no': 2} This is called a dictionary. It uses {} instead of [] . You can think of it as a bunch of \"keys\" (like question ) and \"values\" (like 'Does your animal fly? ). While we're at it, why don't we change the way we write the answers too? {'number': 4, 'answer': 'fruit bat'}, Try rewriting your code from the last lesson to use this structure. If you want to test if a particular key is in the dictionary, you can use in , eg. info = {'number': 4, 'answer': 'fruit bat'} print('question' in info) # False print('answer' in info) # True Here's the same list we had before, in the new format: data = [ {'number': 0, 'question': 'Does your animal fly?', 'yes': 1, 'no': 2}, {'number': 1, 'question': 'Is your flying animal a bird?', 'yes': 3, 'no': 4}, {'number': 2, 'question': 'Does your animal live underwater?', 'yes': 7, 'no': 8}, {'number': 3, 'question': 'Is your bird native to Australia?', 'yes': 5, 'no': 6}, {'number': 4, 'answer': 'fruit bat'}, {'number': 5, 'answer': 'kookaburra'}, {'number': 6, 'answer': 'blue jay'}, {'number': 7, 'question': 'Is your animal a mammal?', 'yes': 9, 'no': 10}, {'number': 8, 'answer': 'wombat'}, {'number': 9, 'answer': 'blue whale'}, {'number': 10, 'answer': 'goldfish'}, ] Here's one way you could do it: i = 0 while True: info = data[i] if 'question' in info: question = info['question'] x = input(question + ' ') if x == 'y': i = info['yes'] if x == 'n': i = info['no'] else: answer = info['answer'] x = input('Is it a ' + answer + '? ') if x == 'y': print('Wow, I guessed it!') if x == 'n': print('You beat me!') break","title":"Lesson 7: Dictionaries"},{"location":"lessons/007-dictionaries/#lesson-7-dictionaries","text":"That worked but lines like this are hard to read, don't you think? question = info[1] yes_number = info[2] no_number = info[3] Wouldn't something like this be nicer and less error-prone? question = info['question'] yes_number = info['yes'] no_number = info['no'] Python lets us do this. Instead of putting our question info into a list like this: [0, 'Does your animal fly?', 1, 2] you can name each part like this: {'number': 0, 'question': 'Does your animal fly?', 'yes': 1, 'no': 2} This is called a dictionary. It uses {} instead of [] . You can think of it as a bunch of \"keys\" (like question ) and \"values\" (like 'Does your animal fly? ). While we're at it, why don't we change the way we write the answers too? {'number': 4, 'answer': 'fruit bat'}, Try rewriting your code from the last lesson to use this structure. If you want to test if a particular key is in the dictionary, you can use in , eg. info = {'number': 4, 'answer': 'fruit bat'} print('question' in info) # False print('answer' in info) # True Here's the same list we had before, in the new format: data = [ {'number': 0, 'question': 'Does your animal fly?', 'yes': 1, 'no': 2}, {'number': 1, 'question': 'Is your flying animal a bird?', 'yes': 3, 'no': 4}, {'number': 2, 'question': 'Does your animal live underwater?', 'yes': 7, 'no': 8}, {'number': 3, 'question': 'Is your bird native to Australia?', 'yes': 5, 'no': 6}, {'number': 4, 'answer': 'fruit bat'}, {'number': 5, 'answer': 'kookaburra'}, {'number': 6, 'answer': 'blue jay'}, {'number': 7, 'question': 'Is your animal a mammal?', 'yes': 9, 'no': 10}, {'number': 8, 'answer': 'wombat'}, {'number': 9, 'answer': 'blue whale'}, {'number': 10, 'answer': 'goldfish'}, ] Here's one way you could do it: i = 0 while True: info = data[i] if 'question' in info: question = info['question'] x = input(question + ' ') if x == 'y': i = info['yes'] if x == 'n': i = info['no'] else: answer = info['answer'] x = input('Is it a ' + answer + '? ') if x == 'y': print('Wow, I guessed it!') if x == 'n': print('You beat me!') break","title":"Lesson 7: Dictionaries"},{"location":"lessons/008-data-classes/","text":"Lesson 8: Data classes First pass Dictionaries are great, but it's still easy to make errors with them, eg. what if you accidentally mistyped a key like this: {'number': 0, 'question': 'Does your animal fly?', 'yes': 1, 'no': 2}, {'number': 1, 'qustion': 'Is your flying animal a bird?', 'yes': 3, 'no': 4}, You wouldn't know until the user hits that question, and then it would go wrong. Data classes are a solution to this. We'll define one for questions and another one for answers. Here's how: from dataclasses import dataclass @dataclass class Question: number: int text: str yes_number: int no_number: int @dataclass class Answer: number: int text: str data = [ Question(0, 'Does your animal fly?', 1, 2), Question(1, 'Is your flying animal a bird?', 3, 4), Question(2, 'Does your animal live underwater?', 7, 8), Question(3, 'Is your bird native to Australia?', 5, 6), Answer(4, 'fruit bat'), Answer(5, 'kookaburra'), Answer(6, 'blue jay'), Question(7, 'Is your animal a mammal?', 9, 10), Answer(8, 'wombat'), Answer(9, 'blue whale'), Answer(10, 'goldfish'), ] You can write this too, which makes things clearer: Question(number=0, text='Does your animal fly?', yes_number=1, no_number=2), To use data classes, do stuff like this: q = Question(0, 'Does your animal fly?', 1, 2) print(q.number) print(q.text) print(q) print(isinstance(q, Question)) Second pass Why are we using numbers to refer to questions and answers? Let's just point to them directly, and write our questions out in a tree, like this: from dataclasses import dataclass from typing import Union @dataclass class Answer: text: str @dataclass class Question: text: str yes: Union['Question', Answer] no: Union['Question', Answer] q = Question( 'Does your animal fly?', yes=Question( 'Is your flying animal a bird?', yes=Question( 'Is your bird native to Australia?', yes=Answer('kookaburra'), no=Answer('blue jay'), ), no=Answer('fruit bat'), ), no=Question( 'Does your animal live underwater?', yes=Question('Is your animal a mammal?', yes=Answer('blue whale'), no=Answer('gold fish'), ), no=Answer('wombat'), ) ) The loop is very straightforward now: current = q while isinstance(current, Question): x = input(current.text + ' ') if x == 'y': current = current.yes if x == 'n': current = current.no x = input('Is it a ' + answer + '? ') if x == 'y': print('Wow, I guessed it!') if x == 'n': print('You beat me!') Do you think this is an improvement?","title":"Lesson 8: Data classes"},{"location":"lessons/008-data-classes/#lesson-8-data-classes","text":"","title":"Lesson 8: Data classes"},{"location":"lessons/008-data-classes/#first-pass","text":"Dictionaries are great, but it's still easy to make errors with them, eg. what if you accidentally mistyped a key like this: {'number': 0, 'question': 'Does your animal fly?', 'yes': 1, 'no': 2}, {'number': 1, 'qustion': 'Is your flying animal a bird?', 'yes': 3, 'no': 4}, You wouldn't know until the user hits that question, and then it would go wrong. Data classes are a solution to this. We'll define one for questions and another one for answers. Here's how: from dataclasses import dataclass @dataclass class Question: number: int text: str yes_number: int no_number: int @dataclass class Answer: number: int text: str data = [ Question(0, 'Does your animal fly?', 1, 2), Question(1, 'Is your flying animal a bird?', 3, 4), Question(2, 'Does your animal live underwater?', 7, 8), Question(3, 'Is your bird native to Australia?', 5, 6), Answer(4, 'fruit bat'), Answer(5, 'kookaburra'), Answer(6, 'blue jay'), Question(7, 'Is your animal a mammal?', 9, 10), Answer(8, 'wombat'), Answer(9, 'blue whale'), Answer(10, 'goldfish'), ] You can write this too, which makes things clearer: Question(number=0, text='Does your animal fly?', yes_number=1, no_number=2), To use data classes, do stuff like this: q = Question(0, 'Does your animal fly?', 1, 2) print(q.number) print(q.text) print(q) print(isinstance(q, Question))","title":"First pass"},{"location":"lessons/008-data-classes/#second-pass","text":"Why are we using numbers to refer to questions and answers? Let's just point to them directly, and write our questions out in a tree, like this: from dataclasses import dataclass from typing import Union @dataclass class Answer: text: str @dataclass class Question: text: str yes: Union['Question', Answer] no: Union['Question', Answer] q = Question( 'Does your animal fly?', yes=Question( 'Is your flying animal a bird?', yes=Question( 'Is your bird native to Australia?', yes=Answer('kookaburra'), no=Answer('blue jay'), ), no=Answer('fruit bat'), ), no=Question( 'Does your animal live underwater?', yes=Question('Is your animal a mammal?', yes=Answer('blue whale'), no=Answer('gold fish'), ), no=Answer('wombat'), ) ) The loop is very straightforward now: current = q while isinstance(current, Question): x = input(current.text + ' ') if x == 'y': current = current.yes if x == 'n': current = current.no x = input('Is it a ' + answer + '? ') if x == 'y': print('Wow, I guessed it!') if x == 'n': print('You beat me!') Do you think this is an improvement?","title":"Second pass"}]}