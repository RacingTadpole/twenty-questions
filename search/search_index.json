{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Learn To Program in Python We are going to write a text game where you think of an animal, and the program asks questions to try and guess what it is. The program will not be a very good guesser at first, but it will learn new animals the more you play it. These lessons came out of teaching my 13-year-old son to program in Python, and I hope they may be useful for you too. Installing everything you need is probably the hardest part. If you can do that, the lessons should be a breeze :-) . Part 1 Lesson 1: Print and Input Lesson 2: If Lesson 3: More about Variables Lesson 4: For Loops Lesson 5: While Loops","title":"Home"},{"location":"#learn-to-program-in-python","text":"We are going to write a text game where you think of an animal, and the program asks questions to try and guess what it is. The program will not be a very good guesser at first, but it will learn new animals the more you play it. These lessons came out of teaching my 13-year-old son to program in Python, and I hope they may be useful for you too. Installing everything you need is probably the hardest part. If you can do that, the lessons should be a breeze :-) . Part 1 Lesson 1: Print and Input Lesson 2: If Lesson 3: More about Variables Lesson 4: For Loops Lesson 5: While Loops","title":"Learn To Program in Python"},{"location":"lessons/001-print-and-input/","text":"Lesson 1: Print and Input See if you can guess what this program will do: print('Hello!') Type it into a python interpreter and check. We found putting it into a new file in Visual Studio Code, and then clicking the green \"play\" button, works well. How about this program? print('Hello!') input('What is your name? ') What if you want to do something with the name the person types in? How about this: x = input('What is your name? ') print('Hello ' + x + '!') Notice how + \"adds\" the parts of the sentence together? Programmers call text like this \"strings\" for some reason. What do you think the next program would do? q = 'What is your name? ' x = input(q) print('Hello ' + x + '!')","title":"Lesson 1: Print and Input"},{"location":"lessons/001-print-and-input/#lesson-1-print-and-input","text":"See if you can guess what this program will do: print('Hello!') Type it into a python interpreter and check. We found putting it into a new file in Visual Studio Code, and then clicking the green \"play\" button, works well. How about this program? print('Hello!') input('What is your name? ') What if you want to do something with the name the person types in? How about this: x = input('What is your name? ') print('Hello ' + x + '!') Notice how + \"adds\" the parts of the sentence together? Programmers call text like this \"strings\" for some reason. What do you think the next program would do? q = 'What is your name? ' x = input(q) print('Hello ' + x + '!')","title":"Lesson 1: Print and Input"},{"location":"lessons/002-if/","text":"Lesson 2: If What do you think this would do? print('Welcome to Twenty Questions') print('Please think of an animal or plant, and I will try to guess what it is by asking questions.') print('Please answer questions with \"yes\" or \"no') print() x = input('Does your animal fly? ') print('You said: ' + x) if x == 'yes': print('Great!') print('I think your animal is a fruit bat.') if x == 'no': print('Aha!') print('I think your animal is a wombat.') Notice the double equals signs == that \"if\" uses to check if x equals 'yes' . Programmers use a double equals sign to ask a question about whether the two things are equal. (Does x equal 'yes' ?) In contrast, the single equals sign in x = input('Does your animal fly? ') actually changes x to \"make it equal to\" what the person types in. Also notice instead of saying \"then\", there's a colon, and the stuff after it has been indented. If that's too easy, what about this one? x = input('Does your animal fly? ') if x == 'yes': xy = input('Is your flying animal a bird? ') if xy == 'yes': print('I think your animal is a pelican.') if xy == 'no': print('I think your animal is a fruit bat.') if x == 'no': print('I think your animal is a wombat.') It's starting to look a bit like our game now! It would get boring to write this out for too many more questions, right? Wouldn't it be nice to put this in a loop somehow?","title":"Lesson 2: If"},{"location":"lessons/002-if/#lesson-2-if","text":"What do you think this would do? print('Welcome to Twenty Questions') print('Please think of an animal or plant, and I will try to guess what it is by asking questions.') print('Please answer questions with \"yes\" or \"no') print() x = input('Does your animal fly? ') print('You said: ' + x) if x == 'yes': print('Great!') print('I think your animal is a fruit bat.') if x == 'no': print('Aha!') print('I think your animal is a wombat.') Notice the double equals signs == that \"if\" uses to check if x equals 'yes' . Programmers use a double equals sign to ask a question about whether the two things are equal. (Does x equal 'yes' ?) In contrast, the single equals sign in x = input('Does your animal fly? ') actually changes x to \"make it equal to\" what the person types in. Also notice instead of saying \"then\", there's a colon, and the stuff after it has been indented. If that's too easy, what about this one? x = input('Does your animal fly? ') if x == 'yes': xy = input('Is your flying animal a bird? ') if xy == 'yes': print('I think your animal is a pelican.') if xy == 'no': print('I think your animal is a fruit bat.') if x == 'no': print('I think your animal is a wombat.') It's starting to look a bit like our game now! It would get boring to write this out for too many more questions, right? Wouldn't it be nice to put this in a loop somehow?","title":"Lesson 2: If"},{"location":"lessons/003-variables/","text":"Lesson 3: More about Variables Let's learn one more thing before we get to loops. Remember we had q = 'What is your name? ' x = input(q) print('Hello ' + x + '!') Programmers call q and x \"variables\", because they can vary. String variables These particular variables are \"strings\" - they contain text. (Remember programmers call text \"strings\" for some reason.) Variables can be other types of things too. Numeric variables In order to do maths, you might expect numbers, and these are called \"integers\" (for whole numbers) or \"floats\" (for decimal numbers - the word \"float\" was picked originally because the computer stores them in a way that lets the decimal place \"float\" a long way to the left or right). n = 10 print(n) print(n + 5) print(n / 2) print(n * 3) k = n * 3 + 1 print(k) x = k / 10 print(x) Etc. You can ask if a variable is a string ( str ), an integer ( int ) or a float ( float ) using isinstance like this: n = 10 print(isinstance(n, int)) print(isinstance(n, str)) which returns True or False . In fact these responses are another type of variable, which can only be True or False. Such variables are named \"boolean\" ( bool ) after George Boole, an 1800s mathematician, for some reason, although the idea of true and false must be older than that. True/False variables a = True print(a) x = 'yes' print(x == 'yes') Notice the double equals sign gives us a True or False too. If you think about it, that makes sense for using with \"if\", right? If something is true, do something; if it's false, do something else. Lists Let's talk about one more, fancier type of variable - a list, eg. x = [1, 3, 4, 7, 'hello'] print(x) print(isinstance(x, list)) This will be handy in our next lesson, on loops.","title":"Lesson 3: More about Variables"},{"location":"lessons/003-variables/#lesson-3-more-about-variables","text":"Let's learn one more thing before we get to loops. Remember we had q = 'What is your name? ' x = input(q) print('Hello ' + x + '!') Programmers call q and x \"variables\", because they can vary.","title":"Lesson 3: More about Variables"},{"location":"lessons/003-variables/#string-variables","text":"These particular variables are \"strings\" - they contain text. (Remember programmers call text \"strings\" for some reason.) Variables can be other types of things too.","title":"String variables"},{"location":"lessons/003-variables/#numeric-variables","text":"In order to do maths, you might expect numbers, and these are called \"integers\" (for whole numbers) or \"floats\" (for decimal numbers - the word \"float\" was picked originally because the computer stores them in a way that lets the decimal place \"float\" a long way to the left or right). n = 10 print(n) print(n + 5) print(n / 2) print(n * 3) k = n * 3 + 1 print(k) x = k / 10 print(x) Etc. You can ask if a variable is a string ( str ), an integer ( int ) or a float ( float ) using isinstance like this: n = 10 print(isinstance(n, int)) print(isinstance(n, str)) which returns True or False . In fact these responses are another type of variable, which can only be True or False. Such variables are named \"boolean\" ( bool ) after George Boole, an 1800s mathematician, for some reason, although the idea of true and false must be older than that.","title":"Numeric variables"},{"location":"lessons/003-variables/#truefalse-variables","text":"a = True print(a) x = 'yes' print(x == 'yes') Notice the double equals sign gives us a True or False too. If you think about it, that makes sense for using with \"if\", right? If something is true, do something; if it's false, do something else.","title":"True/False variables"},{"location":"lessons/003-variables/#lists","text":"Let's talk about one more, fancier type of variable - a list, eg. x = [1, 3, 4, 7, 'hello'] print(x) print(isinstance(x, list)) This will be handy in our next lesson, on loops.","title":"Lists"},{"location":"lessons/004-for-loops/","text":"Lesson 4: For loops What do you think this will do? for x in [1, 2, 3, 5, 8]: print(x) It loops through the list and prints each element. You can do stuff to the element too: for x in [1, 2, 3, 5, 8]: print(x * 2 + 3) And you can put the list in a variable too: a = [1, 2, 3, 5, 8] for x in a: print(x) We've been using single letters for variables but you can use words. You just can't put spaces in the words, but we can use \"_\". numbers = [1, 2, 3, 5, 8] for x in numbers: print(x) or even my_numbers = [1, 2, 3, 5, 8] for number in my_numbers: print(number) How would you write a loop to show the squares of the numbers above? A little trick One nice thing about Python is this little trick - you can bring the for \"inside\" the list like this: a = [1, 2, 3, 5, 8] b = [x * 2 for x in a] print(b)","title":"Lesson 4: For loops"},{"location":"lessons/004-for-loops/#lesson-4-for-loops","text":"What do you think this will do? for x in [1, 2, 3, 5, 8]: print(x) It loops through the list and prints each element. You can do stuff to the element too: for x in [1, 2, 3, 5, 8]: print(x * 2 + 3) And you can put the list in a variable too: a = [1, 2, 3, 5, 8] for x in a: print(x) We've been using single letters for variables but you can use words. You just can't put spaces in the words, but we can use \"_\". numbers = [1, 2, 3, 5, 8] for x in numbers: print(x) or even my_numbers = [1, 2, 3, 5, 8] for number in my_numbers: print(number) How would you write a loop to show the squares of the numbers above?","title":"Lesson 4: For loops"},{"location":"lessons/004-for-loops/#a-little-trick","text":"One nice thing about Python is this little trick - you can bring the for \"inside\" the list like this: a = [1, 2, 3, 5, 8] b = [x * 2 for x in a] print(b)","title":"A little trick"},{"location":"lessons/005-while-loops/","text":"Lesson 5: While Loops You can also write loops with while . The example below keeps asking you to type something until you type \"stop\". Note that != means \"does not equal\", so the loop keeps going \"while x does not equal 'stop'\". As soon as it does, the computer leaves the indented section. x = 'ok' while x != 'stop': x = input('Type anything, or \"stop\" to stop: ') print('You typed: ' + x) print('Finally!') The example below keeps asking for a number until you give it one above 10. x = 0 while x < 11: y = input('Give me a number: ') x = int(y) print('Finally, a number above 10!') Notice how we use int here to convert a \"string\" input to a whole number. Now you understand variables, \"if\"s and loops, you basically understand programming!","title":"Lesson 5: While Loops"},{"location":"lessons/005-while-loops/#lesson-5-while-loops","text":"You can also write loops with while . The example below keeps asking you to type something until you type \"stop\". Note that != means \"does not equal\", so the loop keeps going \"while x does not equal 'stop'\". As soon as it does, the computer leaves the indented section. x = 'ok' while x != 'stop': x = input('Type anything, or \"stop\" to stop: ') print('You typed: ' + x) print('Finally!') The example below keeps asking for a number until you give it one above 10. x = 0 while x < 11: y = input('Give me a number: ') x = int(y) print('Finally, a number above 10!') Notice how we use int here to convert a \"string\" input to a whole number. Now you understand variables, \"if\"s and loops, you basically understand programming!","title":"Lesson 5: While Loops"}]}